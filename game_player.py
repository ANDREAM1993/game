class Player:
    """-------------------------------------------------------------------------------------------------------
Класс для создания игроков и работы с игроками:
-------------------------------------------------------------------------------------------------------
1) Поля:
   * NAME - имя игрока;
   * HEALTH - уровень здоровья игрока.
-------------------------------------------------------------------------------------------------------
2) Методы:
2.1) __init__(name, health) - создание объекта Player.
     Входные данные:
     * name(str) - имя игрока (None по умолчанию);
     * health(int) - уровень здоровья игрока (None по умолчанию);
     Выходные данные: нет.
-------------------------------------------------------------------------------------------------------
2.2) validate(name_size, health_level) - проверка валидности созданого игрока.
     Входные данные:
     * name_size(dict) - минимальный (min) и максимальный (max) размер имени (None по умолчанию);
     * health_level(dict) - минимальный (min) и максимальный (max) уровень здоровья (None по умолчанию).
     Выходные данные:
     * True - созданый игрок имеет валидные параметры;
     * False - созданый игрок имеет невалидные параметры.
-------------------------------------------------------------------------------------------------------
2.3) hurt(damage, min_health_level) - вычитание урона из текущего уровня здоровья игрока.
     Входные данные:
     * damage(int) - уровень урона нанесенного игроку (None по умолчанию);
     * min_health_level(int) - минимальный уровень здоровья игрока (None по умолчанию).
     Выходные данные: нет.
-------------------------------------------------------------------------------------------------------
2.4) heal(medicine, max_health_level) - добавление очков здоровья к текущему уровню здоровья игрока.
     Входные данные:
     * medicine(int) - количество очков здоровья (None по умолчанию);
     * max_health_level(int) - максимальный уровень здоровья игрока (None по умолчанию).
     Выходные данные: нет.
-------------------------------------------------------------------------------------------------------"""
    def __init__(self, name = None, health = None):
        # имя и уровень здоровья объязательны для задания;
        if None not in (name, health):
            self.NAME = name     # установка имени игрока;
            self.HEALTH = health # установка начального уровня здоровья игрока;
        else:
            input("Player->__init__: Имя или уровень здоровья нового игрока не заданы.")

    def validate(self, name_size = None, health_level = None):
        # граничные уровни для размера имя и уровеня здоровья игрока объязательны для задания;
        if None not in (name_size, health_level):
            # проверка наличия поля с именем игрока;
            if "NAME" in self.__dict__:
                # проверка формата упаковки граничных размеров имени игрока;
                if type(name_size) == dict:
                    # проверка наличия нижней и верхней границы размера имени игрока;
                    if len(name_size) == 2:
                        # проверка валидности формата граничных размеров имени игрока;
                        if False not in [type(i) == int for i in name_size.values()]:
                            # проверка валидности граничных размеров имени игрока;
                            if name_size["min"] > 0 and name_size["max"] > name_size["min"]:
                                # проверка валидности формата имени игрока;
                                if type(self.NAME) == str:
                                    # проверка валидности размера имени игрока;
                                    if name_size["min"] <= len(self.NAME) <= name_size["max"]:
                                        # проверка наличия поля с уровнем здоровья игрока;
                                        if "HEALTH" in self.__dict__:
                                            # проверка валидности формата упаковки граничных уровней здоровья игрока;
                                            if type(health_level) == dict:
                                                # проверка наличия нижней и верхней границы уровня здоровья игрока;
                                                if len(health_level) == 2:
                                                    # проверка валидности формата граничных уровней здоровья игрока;
                                                    if False not in [type(i) == int for i in health_level.values()]:
                                                        # проверка валидности граничных уровней здоровья игрока;
                                                        if 0 <= health_level["min"] < health_level["max"]:
                                                            # проверка валидности формата уровня здоровья игрока;
                                                            if type(self.HEALTH) == int:
                                                                # проверка валидности уровня здоровья игрока;
                                                                if health_level["min"] <= self.HEALTH <= health_level["max"]:
                                                                    return True # данные игрока валидны;
                                                                else:
                                                                    input("Player->validate: Невалидный уровень здоровья у \"{}\".".format(self.NAME))
                                                            else:
                                                                input("Player->validate: Невалидный формат уровня здоровья у \"{}\".".format(self.NAME))
                                                        else:
                                                            input("Player->validate: Невалидные лимиты уровней здоровья у \"{}\".".format(self.NAME))
                                                    else:
                                                        input("Player->validate: Невалидные форматы лимитов уровней здоровья у \"{}\".".format(self.NAME))
                                                else:
                                                    input("Player->validate: Не все лимиты уровней здоровья у \"{}\" заданы.".format(self.NAME))
                                            else:
                                                input("Player->validate: Невалидный формат уровней здоровья у \"{}\".".format(self.NAME))
                                        else:
                                            input("Player->validate: У \"{}\" не создан индикатор здоровья.".format(self.NAME)) 
                                    else:
                                        input("Player->validate: Невалидный размер имени игрока.")
                                else:
                                    input("Player->validate: Невалидный формат имени игрока.")
                            else:
                                input("Player->validate: Невалидные лимиты размера имени игрока.")
                        else:
                            input("Player->validate: Невалидные форматы лимитов размера имени игрока.")
                    else:
                        input("Player->validate: Не все лимиты размера имени игрока заданы.")
                else:
                    input("Player->validate: Невалидный формат размеров имени игрока.")
            else:
                input("Player->validate: У игрока нет имени.")
        else:
            input("Player->validate: Лимиты имени или уровеня здороья игрока не заданы.")
        return False # данные игрока не валидны;
    
    def hurt(self, damage = None, min_health_level = None):
        # уровень урона имя и минимальный уровень здоровья объязательны для задания;
        if None not in (damage, min_health_level):
            # проверка валидности формата урона;
            if type(damage) == int:
                # проверка валидности формата минимального уровня здоровья игрока;
                if type(min_health_level) == int:
                    # значение урона всегда < 0, поэтому он суммируется с текущим уровнем здоровья игрока (для понижения);
                    if damage < 0:
                        # если сумма текущего уровня здоровья и урона падает ниже минимального уровня здоровья,
                        # то уровень здоровья становится минимальным (но не падает ниже допустимого), иначе из
                        # текущего уровня здоровья игрока вычитается урон;
                        if (self.HEALTH + damage) < min_health_level:
                            self.HEALTH = min_health_level
                        else:
                            self.HEALTH = self.HEALTH + damage
                    else:
                        input("Player->hurt: Невалидное значение уровня урона (\"{}\", {}).".format(self.NAME, damage))
                else:
                    input("Player->hurt: Невалидный формат минимального уровня здоровья (\"{}\").".format(self.NAME))
            else:
                input("Player->hurt: Невалидный формат уровня урона (\"{}\").".format(self.NAME))
        else:
            input("Player->hurt: Уровень урона и минимальный уровень здоровья не заданы (\"{}\").".format(self.NAME))
    
    def heal(self, medicine = None, max_health_level = None):
        # уровень исцеления и уровень здоровья игрока объязательны для задания;
        if None not in (medicine, max_health_level):
            # проверка валидности формата уроня исцеления;
            if type(medicine) == int:
                # проверка валидности формата максимального уровня здоровья;
                if type(max_health_level) == int:
                    # значение исцеления всегда > 0, поэтому оно суммируется с текущим уровнем здоровья игрока (для повышения);
                    if medicine > 0:
                        # если сумма текущего уровня здоровья и исцеления становится высше максимального уровня здоровья,
                        # то уровень здоровья становится максимальным (но не превышает допустимого), иначе к
                        # текущему уровню здоровья игрока добавляются очки исцеления;
                        if (self.HEALTH + medicine) > max_health_level:
                            self.HEALTH = max_health_level
                        else:
                            self.HEALTH = self.HEALTH + medicine
                    else:
                        input("Player->heal: Невалидное значение уровня исцеления (\"{}\", {}).".format(self.NAME, medicine))
                else:
                    input("Player->heal: Невалидный формат максимального уровня здоровья (\"{}\").".format(self.NAME))
            else:
                input("Player->heal: Невалидный формат уровня исцеления (\"{}\").".format(self.NAME))
        else:
            input("Player->heal: Уровень исцеления и максимальный уровень здоровья не заданы (\"{}\").".format(self.NAME))
